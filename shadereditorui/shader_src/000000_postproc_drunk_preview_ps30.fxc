// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_SWARM_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );

// Constants
const float _g_Time		: register( c16 );
const float3 _g_VecForward		: register( c17 );

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float _var0 = _g_VecForward.x;
	float _var1 = _g_VecForward.y;
	float2 _var2 = In.vTexCoord_0 - float2( 0.500000, 0.500000 );
	float4 _var3 = float4( 0.000000, 0.000000, 0.000000, 0.000000 );
	float _var4 = In.vTexCoord_0.y;
	float _var5 = dot( _g_VecForward, float3( 0.000000, 0.000000, 1.000000 ) );
	_var0 = atan2( _var0, _var1 );
	float _var6 = length( _var2 );
	_var4 = _var4 - float( 0.500000 );
	_var5 = smoothstep( float( 1.000000 ), float( 0.500000 ), _var5 );
	_var0 = degrees( _var0 );
	_var6 = smoothstep( float( 0.000000 ), float( 0.650000 ), _var6 );
	_var4 = abs( _var4 );
	_var0 = _var0 / float( 57.295776 );
	_var6 = 1.0f - _var6;
	_var4 = _var4 * float( 2.400000 );
	_var0 = _g_Time + _var0;
	float _var7 = float( 0.500000 ) * _var6;
	float _var8 = smoothstep( float( 0.200000 ), float( 2.000000 ), _var6 );
	float _var9 = float( 0.650000 ) * _var6;
	_var4 = pow( _var4, float( 2.000000 ) );
	_var5 = _var6 * _var5;
	float _var10 = sin( _var0 );
	float2 _var11 = _var8 + float2( 1.000000, 1.000000 );
	float _var12 = _var0 + float( 0.300000 );
	float _var13 = cos( _var0 );
	_var4 = min( _var4, float( 1.000000 ) );
	_var10 = _var10 * _var7;
	_var12 = sin( _var12 );
	_var13 = _var13 * float( 0.050000 );
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float2 trans_def = float2( 0.0f, 0.0f );
		float fs = sin( _var10 );
		float fc = cos( _var10 );
		float4 row_0 = float4( fc * _var11.x, -fs * _var11.x, 0, ( -center_def.x * fc + center_def.y * fs ) * _var11.x + center_def.x + trans_def.x );
		float4 row_1 = float4( fs * _var11.y, fc * _var11.y, 0, ( -center_def.x * fs - center_def.y * fc ) * _var11.y + center_def.y + trans_def.y );
		_var11.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var11.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	_var9 = _var9 * _var12;
	float2 _var14 = float2( _var13.x, 0.000000 );
	float4 _var15 = tex2D( _Sampler_00, _var11 ).rgba;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float2 scale_def = float2( 1.0f, 1.0f );
		float fs = sin( _var9 );
		float fc = cos( _var9 );
		float4 row_0 = float4( fc * scale_def.x, -fs * scale_def.x, 0, ( -center_def.x * fc + center_def.y * fs ) * scale_def.x + center_def.x + _var14.x );
		float4 row_1 = float4( fs * scale_def.y, fc * scale_def.y, 0, ( -center_def.x * fs - center_def.y * fc ) * scale_def.y + center_def.y + _var14.y );
		_var14.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var14.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	for ( int _var16 = -10; _var16 <= 10; _var16++ )
	{
		float2 _var17 = _var11;
		float _var18 = float( 0.002000 ) * _var16;
		float _var19 = _var17.x;
		float _var20 = _var17.y;
		_var19 = _var19 + _var18;
		float2 _var21 = float2( _var19, _var20 );
		float4 _var22 = tex2D( _Sampler_00, _var21 ).rgba;
		_var3 = _var3 + _var22;
	}
	float4 _var23 = tex2D( _Sampler_00, _var14 ).rgba;
	_var3 = _var3 / float( 24.000000 );
	_var15 = lerp( _var15, _var23, _var6 );
	_var3 = lerp( _var15, _var3, _var4 );
	float _var24 = _var15.w;
	_var24 = _var24 * _var5;
	_var24 = _var24 * float( 0.500000 );
	_var24 = _var24 + float( 0.500000 );
	_var3 = _var3 * _var24;
	Out.vColor_0 = _var3;
	return Out;
}